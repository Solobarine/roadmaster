require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/test_drives', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # TestDrive. As you add validations to TestDrive, be sure to
  # adjust the attributes here as well.
  let!(:user) { FactoryBot.create(:user) }
  let!(:customer) { FactoryBot.create(:customer) }
  let!(:customer2) { FactoryBot.create(:customer) }
  let!(:manufacturer) { FactoryBot.create(:manufacturer) }
  let!(:brand) { FactoryBot.create(:brand, manufacturer: manufacturer) }
  let!(:vehicle) { FactoryBot.create(:vehicle, brand: brand) }

  let(:valid_attributes) do
    {
      booking_date: Date.today.next_month,
      booking_time: {
        starting: '09:00',
        ending: '10:00'
      },
      notes: 'Reminder of the test drive',
      vehicle_id: vehicle.id
    }
  end

  let(:invalid_attributes) do
    {
      booking_date: 8,
      booking_time: 4
    }
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # TestDrivesController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    {}
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      sign_in user

      TestDrive.create! valid_attributes.merge(customer_id: customer.id)
      get test_drives_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end

    it 'renders an error with status code 403 for Customers' do
      sign_in customer

      get test_drives_url, headers: valid_headers, as: :json
      expect(response).to have_http_status(:forbidden)
      expect(JSON.parse(response.body)['error']).to be_present
    end
  end

  describe 'GET /show' do
    it 'renders a successful response for users' do
      sign_in user

      test_drive = TestDrive.create! valid_attributes.merge(customer_id: customer.id)
      get test_drife_url(test_drive), as: :json
      expect(response).to be_successful
    end

    it 'renders a successful response for Test Drive Owner' do
      sign_in customer

      test_drive = TestDrive.create! valid_attributes.merge(customer_id: customer.id)
      get test_drife_url(test_drive), as: :json
      expect(response).to be_successful
    end

    it 'renders an error with status code 403 for Non-Owners' do
      sign_in customer2

      test_drive = TestDrive.create! valid_attributes.merge(customer_id: customer.id)
      get test_drife_url(test_drive), as: :json
      expect(response).to have_http_status(:forbidden)
      expect(JSON.parse(response.body)['error']).to be_present
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new TestDrive' do
        sign_in customer

        expect do
          post test_drives_url,
               params: { test_drive: valid_attributes.merge(customer_id: customer.id) },
               headers: valid_headers, as: :json
        end.to change(TestDrive, :count).by(1)
      end

      it 'renders a JSON response with the new test_drive' do
        sign_in customer

        post test_drives_url,
             params: { test_drive: valid_attributes.merge(customer_id: customer.id) }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new TestDrive' do
        sign_in customer

        expect do
          post test_drives_url,
               params: { test_drive: invalid_attributes }, as: :json
        end.to change(TestDrive, :count).by(0)
      end

      it 'renders a JSON response with errors for the new test_drive' do
        sign_in customer

        post test_drives_url,
             params: { test_drive: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          booking_date: '30-10-2024'
        }
      end

      it 'updates the requested test_drive for user' do
        sign_in user

        test_drive = TestDrive.create! valid_attributes.merge(customer_id: customer.id)
        patch test_drife_url(test_drive),
              params: { test_drive: new_attributes }, headers: valid_headers, as: :json
        test_drive.reload
        expect(response).to have_http_status(:ok)
        expect(JSON.parse(response.body)['message']).to be_present
      end

      it 'renders a JSON response with the test_drive for user' do
        sign_in user

        test_drive = TestDrive.create! valid_attributes.merge(customer_id: customer.id)
        patch test_drife_url(test_drive),
              params: { test_drive: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end

      it 'updates the requested test_drive for owner' do
        sign_in customer

        test_drive = TestDrive.create! valid_attributes.merge(customer_id: customer.id)
        patch test_drife_url(test_drive),
              params: { test_drive: new_attributes }, headers: valid_headers, as: :json
        test_drive.reload
        expect(response).to have_http_status(:ok)
        expect(JSON.parse(response.body)['message']).to be_present
      end

      it 'renders a JSON response with the test_drive for owner' do
        sign_in customer

        test_drive = TestDrive.create! valid_attributes.merge(customer_id: customer.id)
        patch test_drife_url(test_drive),
              params: { test_drive: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end

      it 'does not update the requested test_drive for non-owner' do
        sign_in customer2

        test_drive = TestDrive.create! valid_attributes.merge(customer_id: customer.id)
        patch test_drife_url(test_drive),
              params: { test_drive: new_attributes }, headers: valid_headers, as: :json
        test_drive.reload
        expect(response).to have_http_status(:forbidden)
        expect(JSON.parse(response.body)['error']).to be_present
      end

      it 'renders a JSON response with error code 403 for non-owner' do
        sign_in customer2

        test_drive = TestDrive.create! valid_attributes.merge(customer_id: customer.id)
        patch test_drife_url(test_drive),
              params: { test_drive: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:forbidden)
        expect(JSON.parse(response.body)['error']).to be_present
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'renders a JSON response with errors for the test_drive' do
        sign_in customer

        test_drive = TestDrive.create! valid_attributes.merge(customer_id: customer.id)
        patch test_drife_url(test_drive),
              params: { test_drive: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested test_drive for user' do
      sign_in user

      test_drive = TestDrive.create! valid_attributes.merge(customer_id: customer.id)
      expect do
        delete test_drife_url(test_drive), as: :json
      end.to change(TestDrive, :count).by(-1)
      expect(response).to be_successful
    end

    it 'destroys the requested test_drive for customer' do
      sign_in customer

      test_drive = TestDrive.create! valid_attributes.merge(customer_id: customer.id)
      expect do
        delete test_drife_url(test_drive), headers: valid_headers, as: :json
      end.to change(TestDrive, :count).by(-1)
      expect(response).to be_successful
    end

    it 'renders JSON error with status code 403 for customer' do
      sign_in customer2

      test_drive = TestDrive.create! valid_attributes.merge(customer_id: customer.id)
      delete test_drife_url(test_drive), as: :json
      expect(response).to have_http_status(:forbidden)
      expect(JSON.parse(response.body)['error']).to be_present
    end
  end
end
