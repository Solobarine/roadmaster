require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/reviews', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Review. As you add validations to Review, be sure to
  # adjust the attributes here as well.
  let!(:user) { FactoryBot.create(:user) }
  let!(:customer) { FactoryBot.create(:customer) }
  let!(:customer2) { FactoryBot.create(:customer) }
  let!(:manufacturer) { FactoryBot.create(:manufacturer) }
  let!(:brand) { FactoryBot.create(:brand, manufacturer: manufacturer) }
  let!(:vehicle) { FactoryBot.create(:vehicle, brand: brand) }

  let(:valid_attributes) do
    {
      customer_id: customer.id,
      rating: rand(1..5),
      title: Faker::Lorem.sentence(word_count: rand(1..3)),
      comment: Faker::Lorem.sentence(word_count: rand(2..10))
    }
  end

  let(:invalid_attributes) do
    {
      rating: 'four',
      title: 43,
      comment: ''
    }
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # ReviewsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    {}
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Review.create! valid_attributes
      get reviews_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      review = Review.create! valid_attributes
      get review_url(review), as: :json
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Review' do
        sign_in customer

        expect do
          post reviews_url,
               params: { review: valid_attributes }, headers: valid_headers, as: :json
        end.to change(Review, :count).by(1)
        expect(response).to be_successful
      end

      it 'renders a JSON response with the new review' do
        sign_in customer

        post reviews_url,
             params: { review: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json'))
      end

      it 'fails to creates a new Review for user' do
        sign_in user

        expect do
          post reviews_url,
               params: { review: valid_attributes }, headers: valid_headers, as: :json
        end.to change(Review, :count).by(0)
        expect(response).to have_http_status(:forbidden)
        expect(JSON.parse(response.body)['error']).to be_present
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Review' do
        sign_in customer

        expect do
          post reviews_url,
               params: { review: invalid_attributes }, as: :json
        end.to change(Review, :count).by(0)
      end

      it 'renders a JSON response with errors for the new review' do
        sign_in customer

        post reviews_url,
             params: { review: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          title: 'New Title'
        }
      end

      it 'updates the requested review' do
        sign_in customer

        review = Review.create! valid_attributes
        patch review_url(review),
              params: { review: new_attributes }, headers: valid_headers, as: :json
        review.reload
        expect(response).to be_successful
        expect(JSON.parse(response.body)['message']).to be_present
        expect(JSON.parse(response.body)['review']['title']).to eq('New Title')
      end

      it 'renders a JSON response with the review' do
        sign_in customer

        review = Review.create! valid_attributes
        patch review_url(review),
              params: { review: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end

      it 'updates the requested review for user' do
        sign_in user

        review = Review.create! valid_attributes
        patch review_url(review),
              params: { review: new_attributes }, headers: valid_headers, as: :json
        review.reload
        expect(response).to be_successful
        expect(JSON.parse(response.body)['message']).to be_present
        expect(JSON.parse(response.body)['review']['title']).to eq('New Title')
      end

      it 'renders a JSON response with status code 403 for non owner' do
        sign_in customer2

        review = Review.create! valid_attributes
        patch review_url(review),
              params: { review: new_attributes }, headers: valid_headers, as: :json
        review.reload
        expect(response).to have_http_status(:forbidden)
        expect(JSON.parse(response.body)['error']).to be_present
      end
    end

    context 'with invalid parameters' do
      it 'renders a JSON response with errors for the review' do
        sign_in customer

        review = Review.create! valid_attributes
        patch review_url(review),
              params: { review: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested review for user' do
      sign_in user

      review = Review.create! valid_attributes
      expect do
        delete review_url(review), headers: valid_headers, as: :json
      end.to change(Review, :count).by(-1)
      expect(response).to be_successful
    end

    it 'destroys the requested review for review owner' do
      sign_in customer

      review = Review.create! valid_attributes
      expect do
        delete review_url(review), headers: valid_headers, as: :json
      end.to change(Review, :count).by(-1)
      expect(response).to be_successful
    end

    it 'renders JSON with status code 403 for non owner' do
      sign_in customer2

      review = Review.create! valid_attributes
      delete review_url(review), headers: valid_headers, as: :json
      expect(response).to have_http_status(:forbidden)
      expect(JSON.parse(response.body)['error']).to be_present
    end
  end
end
